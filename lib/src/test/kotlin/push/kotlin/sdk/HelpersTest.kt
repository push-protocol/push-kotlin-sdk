package push.kotlin.sdk
import kotlin.test.Test
import kotlin.test.assertEquals

class HelpersTest {
    @Test fun messageDecryptionTest() {
        val messageContent = "U2FsdGVkX18+UrnRfChnSk36MaqUQC7gD7r8aD2PKtI="
        val encryptedSecret = ENC_MESSAGE

        val decryptedMessage = Helpers.decryptMessage(encryptedSecret, messageContent, PGP_PK)
        assertEquals(decryptedMessage, "welcome to push")
    }

    @Test fun isEthValid() {
        val address1 = "0x355c8042605dEE474c1D5AF5705BC02Ae22351AB"
        val address2 = "0x355c804285dEE474a1D5AF57056BCdh6e22353AC"

        val expected1 = true
        val expected2 = false
        val real1 = Helpers.isValidAddress(address1)
        val real2 = Helpers.isValidAddress(address2)
        assertEquals(expected1, real1)
        assertEquals(expected2, real2)
    }

    @Test fun personal_signature () {
        val message = "This is good place to find a city"
        val sig = PublickKeyBuilder.sign(message)
        println("Sig was $sig")
    }

    @Test fun verifaction() {
        val random = "sometsfhing".toByteArray()
        val sign = PublickKeyBuilder.verifyData(random)
        println("signature was $sign")
    }

    @Test fun signerAbstract() {
        val privateKey = "c39d17b1575c8d5e6e615767e19dc285d1f803d21882fb0c60f7f5b7edb759b2"

        val message = "Create Push Profile \n252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111"
        val signer = Signature()
        val signature = signer.getEipSignature(privateKey,message)
        val address = signer.getAddress(privateKey)
        val expectedSignature = "0x9d71faa2582414160f3bc5b62bd8204b45e8ce60e42e034065366c27ed4f456d406ed157fec97db7cedb070f3488a0e78b6b59467063fab11aee6a2bf8233b131b"
        assertEquals(expectedSignature, signature)
    }

    @Test fun testSignerCanDoEIP191SigV2() {
        val privateKey = "c39d17b1575c8d5e6e615767e19dc285d1f803d21882fb0c60f7f5b7edb759b2"
        val expected = "eip191:0x79725b6918f31cf01da680c8c11c8c6a208130c35459d64032444b7ba6b3b2cc447671d6c3be264fdfa08d5114cead9ca383f683809ec69f3c70c7101fc253221c"
        val something = Signature()
        val wallet = Wallet(something, privateKey)
//        val signature = something.DecryptProfile(privateKey)
        val signature = wallet.getEip191Signature(privateKey,"Enable Push Profile \n" +
                "c6f086dbc8295c8499873bf73e374f0bc230d567705c047938b3414163132280", "v1")
        println("$signature signature")
        assertEquals(expected, signature)
    }
//
    @Test
    fun userDecryptProfile() {
        val privateKey = "c39d17b1575c8d5e6e615767e19dc285d1f803d21882fb0c60f7f5b7edb759b2"
        val signer = Signature()
        val encryptedPrivateKey = "76f799b3950f710fc1bb56b6ec64e1fd708566ab24ad0a14e5c1445b352045680dadf38533b98a2099f8681cb14615d2899577ee95e48e22528f84a81692d03d6c064262edf570b0a29bf9b03a605e7ab67461e5004d7f1defd159e83239bb466860ec2aae96ed0ff85b0c8f1ecb9247119bd28325b13970b500dddece5143fb79b6cab89b0def238bb35caa3f4316a8a8f3735cc1ca8aa897c85fb8e88c60bf5b99153e6d9706ab0c3c0b791d44bbc8416191b6399aedc66d39f63bf60fb220f246803fab4091b62347a4f8fc92da7256280fd169f35d8a6b01b6a6d04b0c981cb64f6f4d8a54b511dc932b9a7298bfb5b9f77b5386639eb9568ad0612ca20b950156ec659569899b97f14ecbb21fe8e73c453962fc72065d786e98305d16bc94522e8493f604d06cefa882ba922ac03176920bcbdf7e2353e0ddb3564688756ad132a23d387813f91d5d095ffcc1a5148155eca23b7e1bf4482c7d7384b0c035931907d4cd54ec4fbfcebc071e14125c0eaa329983311451a8414a4a521065341e875f0da6fbbeebc923fe57d004bf180a46664f5046055b871418a472f032179988bb0d70d459a0ed0c473d3832893ca2ca2d7c694de68700822893bebf8d30696ee6d9647b00b13d6acdfa26a7e7ef084eff0ccd079cbebb4834c3e9f694eca6445954b1b77038883a10e1b8eeaabedc9603be86760a359fd76116779231c977366986c2a9ea220f926508e36581bc797e37883f6dfdb12aabf1fd1c99df03626e3f841ca0be68ecdc67f517501d94d936123e527e9bb44b0adda6e494c29165735e605c3f08bafdc7500290e1183f40a873a8ba6928d87aeb98441871cd0cc9b18e4cda8a5b9d86503531294076f78eb87b128a1c73a3666cf07eda55db6a179bd9443f74ef5ef850fdebb2aaf67e36857d294f2c6636686025a8e9bc1d63758a8ba9a49cd53eb1284d315f1352bf443e423c3fd1bf1329b1173980d8463291d0a9cf7754984b760100306dc0a8f09a2a57880632caef4612f84c495683bda735cdf8594183cd0fe8ad6eefe4f76ea70c58972539c5a3770e2f0394a752de128a2a261d8d30e9fea60acc5bb59218f3a6d224ceb359504c25d3bf421ef4debab12fc6aba818ae5d2faa4448bec9d8487e2b29ac661bfb6a8cad8cf4ddd382ab8f5389da539818382b41659f5b9183ca392eff228f649de141e98e246278183a39f41bb5bbc7da7fe4baa3859b2a79902e4015c92cfade80f8823b79242e6b8563582be261ccefa952e29bc1381ba22a31af71f2a719e8a13842b1eb747c7870f16835067a56daa96525b5cc10a84ef5f64c338e9ef07c5d4a99d0e2ac3bc1849638c8383bdc984a3b5effc155b2acc35b62fe10135c65cf4358c71b1696740dbdca7b525f6cee4a8cf1fc52bdf1ec2a4d5d82ac4e46f00bc7274128b2e7a8e375a8d8586e1bf4b78cde2802949f7e18c9f0f31df4fc1159fe5034392ebdc4df963251645341fccf7e7ed5be36c1e388a44c9ab61dfb8c3a686a55a9d36541a331011e4037fbb80811831c6f65edaf6510487763e5e62cbde16e3129eca1f9016508b9f8948b967f88f5e6001b0e33c8f833917575a4eea9e08caed4bda10a937277b654ef226a35136d15dd01ecdd6562699c271504ff3920e4a1e18e7febe9a6a5cbf566513432903cc2c9986c82bf27e7e34cd926120cbd570d1769dd897ea353c19af12d2373f4c6582ad5889d2f3fb594a2477a0c689188bd4ff0a92d322ae4aab93267b03c4e8506373d57af3c81f337becb607d125760352ebd82431aa84141b67593776bd5c3fe6eabfdf5f3c6f1a81fde4feac55a7b8fb90fca8238309259e05e4e0589f359aace316c3416f311c1876981ebdbb5c27d1f2e8987d8ce2038af2e845a99d485a867583d86f578d8b163a8fd4667238ca3195f79685fc22e68225fb406c81f9f47f6e6ad1b128b00fe1275add62fdb28babaa54cfc241119a42c44b8599d1e396b51f3eedaa9ea436e2d69eee0c085a277573bbff5f56780e94546d1909714052efc3b51c271184ba153e1393f099d96983e565c3a591fef28088f8498fe6a55ecc19276e8c2d364bf2d71e55a142393945bc4dbe7734f4272c9466f182f75cab95d232a64fe74c3817ba68fa074a22839d112d9f475cf5bc284aea30b0a2ecd72c478a548aee71d71fa3fef6119ae7387618cee1a1acd41c6479a5fc8edb8f46623666b94a9645df9877edb49b0c6d69fa908a293df99cced2942c06d21da16bc272d4cd2bd6651aa8b95ac5def4f7e8082fd46e3308d7b7c5383e4655236ebc8c0ac7fad32126a4ec610f838ed93978bcc1a8e0e1194e529fb60ae708c0ee072d81ac2d2c09c9c3effdc25564d2e799c1d9f6d724a9ff1d1d34293ca856684546fc2a652a19731f6c283811577c1db2c07518fe88c447685b5b9047100f7bbaca0dd627262c81aa28263cb63e05eeb530c01e989af032470347287a9a3d3bb58ccaa50df9f65cff01451cd6ed147780d22ccfa5e3d9a175340752de5876cf386f71232535d1e81bd7d355a46a989d9ded8c784cc68e399e8bfd072812648cb31d313f2441aee19d0569031d5ec261d8e3cc23b9875fd9c10f290fd3e19cf5330beb29aa16a27f66bad8d6d9a273bdad88eac348b7cda9b7cb7e354ec84ac00a67df55710f37ba905117c288cb3982d2ba6b2bbc6ca08d5c1b72d99192357d8a135abab3ac702222f7fd32e8cc6f7379cd72a93fe50778f89c03b156019ea3dbcb44bb9bc8dda320b5f1a5130addd4d053b12f91b7ce459692f559df8de71674ecedf67c75036e279b42250e901f1e01385f481a45fbbf496fc752d595e2952c925fbe8183fec192b4b34588c7b399f3855e633bf6aa92025e28d254fc543784a9c6f0dbb7755ac68fd08bbd08d6270e2186635d7243b57649d187d6a997e955d197eee060b591786e75cca192395e90532a54ffaeb77e97a320ec7b80e01b665732f67273d12d3c35a76f7f3334d0c82063d0396e13aa2bd1ce4807bd0fa5a636e37f0b9932af196ce154775b16d7b0a0cf635f5d550a5a797f022f57d1ab4d2600d40f194f30c31b2f92f9d4e59fdf3fc23b6b06ab9974a09b94593307add614f542a267adb3de4ea7ac61b304be91d2e2a40464f79e37ae5c05825bf95bdfb1efde80c7a4852babe680a774767a25630611adcc5607a23505050c7763fd1562f8c4a1557a7766cecb7febe4aac33273707a8e7d29b823146d926bb4aea26cb91327c459bf206552fb860c99b6735fd4b093e36b126b431d5853debec3434bd81f27da3e4a49c0f6f97ec54725b606bd0425c7ec35bedeee975557a2bca2a34f6e6022e8656c5f739514fb144bde1a1b9236e3e121b839d70026a39c9e75ed51383d1adbd9c51f4dccbf512a4f511c588fd9d7d997d7b11746807993d16416ba03ef40aad2c9750a64f61ae499609424b1758fd166ab0d39ca3fa03bd6f963cb2f85da53bdc5278f27b3952caa16fe08cc2bf21f299c7c89f55be0b71f14ce7cc6b294adcc71b898084fa30b44a13298ff2f7480fc9c55e474ee1c4e0d10627e43665e666d982ad39e58146438d98232534dbdda033f5f152d14c6b678c8e8c69e70c3011847305fe655af7372c99b7a893f4fcad648bee21f404dba884e4397c572d7ba2c003a319747d3777a3d902bacb250d956f40ddbdd2d731d6ac88291e4041ed81168fcd24c9040b45fd7d09cbd36d815ed917ff1bacd35fa9cf2109409d53babbb2fa9a44186511498e4c05e9c5f706e22886018f956cb3370eb4c4b918a2dc4d5121f22f594efdffb7dbc6ccfcaeaae3c89c42e70e4fb3b5817fd591dcaf6f8e0464d0b160afe43e4f1a40668ef127e2928305959b350c938ef245f612a1cf23936892540e7fc2b80240d7e2af932187391d01527f64dcc6bd47e570974def4aa936801eb939ca8dd64e46cd43bbc01a821ebbbe87eb0d72284308ceec564473c723ab02385f227b99666206565b480a46007a85009aa85a90396888dce52d2bf763f04965f8621f579b979a3b8675626654126a6b553f5e655bbb8c31c45c8cee0186043f83698ba9cbb328dcd2908118fccc6ff1ea1ebdc8cb950e5949e2c5e1d4a21d6d620dde94a27696966f7cdba6ec1a88a4208ed6459fc9342b2c357b4397bc29d3319f325221eedc9e7e863cd02b4a6573d2c43e9096a89ef2af2837c92c11896ceca62a668a0b6eb7bc5339136d4a41fec3be54f29632fdc7f96488e0e99b559d02429065874886e11830c0c0a0a04762ff35df1bfc950dbb751282182bb4ed6e9726210d1cc97a4855e35f6f28bda4ad50eb8bd2d29fee53cc2f47b8d5964265bca05c5af34ae9c6d01ede56d2304ffc305418f9176e117b10dffcddefac66dafbc880768d0874f2a9ab1076a3752bd413d2a3cc90e34e663774f310b70bea0a94eb8d683c8c9abda175728f956259791459ab3e895e397432ab97e39b2cf99ab8574b6c7a2ed6020c79f78228dd0a24fd261a2ef28fa14e11e777b8627bcd3436160510b6f5dfd56087a335a06b2c07d28474792b90f9c4be0302ebff2562b3b23f4559e58c7dfbd4fc8d5b11d193315c3e63e085710ef0583949705e71ec7e01272735a1313b4cede80dc271367422cd93826376d54c75fe008209622a4103e49e3e6dca4f1634a6ac767d92fde90ecb663362db8839e20a71284bd5557b93e0071f84556251223afd7c59326b6e661360a4317af0bfd8e6641148e6f591d9626fb946a2d4a6a3dadc8959fa71af09e0c23e8d94dd6c3b83112388a39538437ef5f3680fb9766a3c7ee641dcff0a4b5974540e5af3dcfc6c318b65295ef26a44b05492859ffd236ae449df1cecf0b5506b29f1d8a212ec62b806048040c12e11962e4d7da1c8c56efa47dd38b94009e1" // Replace with the actual encrypted private key
        val function = DecryptPgp()
        val decryptedPgpKey = function.decryptPgpKey(privateKey,encryptedPrivateKey )
        println("$decryptedPgpKey decrypted pgpkey")
    }
}